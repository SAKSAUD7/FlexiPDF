import { useState, useEffect, useRef } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { Bars3Icon, XMarkIcon, ChevronDownIcon } from '@heroicons/react/24/outline';
import {
  DocumentArrowUpIcon,
  DocumentArrowDownIcon,
  ScissorsIcon,
  MagnifyingGlassIcon,
  ShieldCheckIcon,
  PencilIcon,
  PhotoIcon,
  DocumentDuplicateIcon,
  ArrowsPointingOutIcon,
  EyeSlashIcon,
  DocumentTextIcon,
  TableCellsIcon,
  PresentationChartBarIcon,
  LockClosedIcon,
  LockOpenIcon,
  ClipboardDocumentCheckIcon,
  SparklesIcon,
  AdjustmentsHorizontalIcon,
  ArrowPathIcon,
  RectangleStackIcon,
  HashtagIcon,
  WrenchScrewdriverIcon,
  DevicePhoneMobileIcon,
  EyeIcon,
  ShareIcon,
  ChatBubbleLeftRightIcon,
  CpuChipIcon,
  LanguageIcon,
  MinusIcon,
  FireIcon,
} from '@heroicons/react/24/outline';

const navigation = [
  { name: 'Home', href: '/' },
  { name: 'Convert', href: '/pdf-to-word' },
  { name: 'Merge', href: '/merge-pdf' },
  { name: 'Edit PDF', href: '/edit-pdf', highlight: true },
  { name: 'Compress', href: '/compress-pdf' },
];

const toolsCategories = [
  {
    name: 'Convert',
    color: 'from-emerald-500 to-teal-500',
    tools: [
      { name: 'Word to PDF', href: '/word-to-pdf', icon: DocumentTextIcon, popular: true },
      { name: 'PDF to Word', href: '/pdf-to-word', icon: DocumentTextIcon, popular: true },
      { name: 'Excel to PDF', href: '/excel-to-pdf', icon: TableCellsIcon },
      { name: 'PDF to Excel', href: '/pdf-to-excel', icon: TableCellsIcon },
      { name: 'JPG to PDF', href: '/jpg-to-pdf', icon: PhotoIcon, popular: true },
      { name: 'PDF to JPG', href: '/pdf-to-jpg', icon: PhotoIcon, popular: true },
    ]
  },
  {
    name: 'Organize',
    color: 'from-blue-500 to-indigo-500',
    tools: [
      { name: 'Merge PDFs', href: '/merge-pdf', icon: DocumentDuplicateIcon, popular: true },
      { name: 'Split PDF', href: '/split-pdf', icon: ScissorsIcon, popular: true },
      { name: 'Rotate PDF', href: '/rotate-pdf', icon: ArrowPathIcon },
      { name: 'Extract Pages', href: '/extract-pages', icon: RectangleStackIcon },
      { name: 'Add Page Numbers', href: '/add-page-numbers', icon: HashtagIcon },
      { name: 'Organize PDF', href: '/organize-pdf', icon: RectangleStackIcon },
    ]
  },
  {
    name: 'Edit & Secure',
    color: 'from-purple-500 to-pink-500',
    tools: [
      { name: 'Edit PDF', href: '/edit-pdf', icon: PencilIcon, popular: true },
      { name: 'Add Watermark', href: '/add-watermark', icon: SparklesIcon },
      { name: 'Crop PDF', href: '/crop-pdf', icon: ScissorsIcon },
      { name: 'Sign PDF', href: '/sign-pdf', icon: ClipboardDocumentCheckIcon, popular: true },
      { name: 'Protect PDF', href: '/protect-pdf', icon: LockClosedIcon },
      { name: 'Unlock PDF', href: '/unlock-pdf', icon: LockOpenIcon },
    ]
  },
  {
    name: 'Optimize',
    color: 'from-orange-500 to-red-500',
    tools: [
      { name: 'Compress PDF', href: '/compress-pdf', icon: ArrowsPointingOutIcon, popular: true },
      { name: 'OCR PDF', href: '/ocr-pdf', icon: MagnifyingGlassIcon },
      { name: 'Repair PDF', href: '/repair-pdf', icon: WrenchScrewdriverIcon },
      { name: 'Compare PDFs', href: '/compare-pdfs', icon: ClipboardDocumentCheckIcon },
      { name: 'PDF Reader', href: '/pdf-reader', icon: EyeIcon },
      { name: 'Share PDF', href: '/share-pdf', icon: ShareIcon },
    ]
  },
  {
    name: 'AI Features',
    color: 'from-violet-500 to-purple-600',
    tools: [
      { name: 'Chat with PDF', href: '/chat-with-pdf', icon: ChatBubbleLeftRightIcon, new: true },
      { name: 'PDF Summarizer', href: '/pdf-summarizer', icon: CpuChipIcon, new: true },
      { name: 'Translate PDF', href: '/translate-pdf', icon: LanguageIcon, new: true },
      { name: 'Scan to PDF', href: '/scan-to-pdf', icon: DevicePhoneMobileIcon },
    ]
  }
];

export default function Navbar() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [toolsDropdownOpen, setToolsDropdownOpen] = useState(false);
  const [scrolled, setScrolled] = useState(false);
  const dropdownRef = useRef(null);
  const location = useLocation();

  useEffect(() => {
    const handleScroll = () => {
      setScrolled(window.scrollY > 10);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setToolsDropdownOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  return (
    <header className={`fixed w-full z-50 transition-all duration-300 ${
      scrolled ? 'bg-white/95 backdrop-blur-lg shadow-lg border-b border-gray-100' : 'bg-white/80 backdrop-blur-sm'
    }`}>
      <nav className="mx-auto flex max-w-7xl items-center justify-between p-3 lg:px-6" aria-label="Global">
        <div className="flex lg:flex-1">
          <Link to="/" className="-m-1.5 p-1.5 transition-transform hover:scale-105">
            <span className="sr-only">FlexiPDF</span>
            <div className="flex items-center space-x-2">
              <div className="h-9 w-9 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                <DocumentTextIcon className="h-5 w-5 text-white" />
              </div>
              <span className="text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent hidden sm:block">
                FlexiPDF
              </span>
            </div>
          </Link>
        </div>
        
        <div className="flex lg:hidden">
          <button
            type="button"
            className="-m-2.5 inline-flex items-center justify-center rounded-md p-2.5 text-gray-700 hover:bg-gray-100 transition-colors"
            onClick={() => setMobileMenuOpen(true)}
          >
            <span className="sr-only">Open main menu</span>
            <Bars3Icon className="h-6 w-6" aria-hidden="true" />
          </button>
        </div>

        <div className="hidden lg:flex lg:gap-x-1">
          {navigation.map((item) => (
            <Link
              key={item.name}
              to={item.href}
              className={`text-sm font-semibold leading-6 transition-all duration-200 relative group px-3 py-2 rounded-lg ${
                item.highlight 
                  ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg hover:shadow-xl hover:scale-105' 
                  : location.pathname === item.href 
                    ? 'text-blue-600 bg-blue-50' 
                    : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
              }`}
            >
              {item.name}
              {item.highlight && (
                <SparklesIcon className="inline h-3 w-3 ml-1" />
              )}
            </Link>
          ))}
          
          {/* All Tools Dropdown - Optimized and Compact */}
          <div className="relative" ref={dropdownRef}>
            <button
              onClick={() => setToolsDropdownOpen(!toolsDropdownOpen)}
              className={`text-sm font-semibold leading-6 transition-all duration-200 relative group px-3 py-2 rounded-lg flex items-center space-x-1 ${
                toolsDropdownOpen ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'
              }`}
            >
              <span>All Tools</span>
              <ChevronDownIcon className={`h-3 w-3 transition-transform duration-200 ${toolsDropdownOpen ? 'rotate-180' : ''}`} />
            </button>
            
            {/* Compact Dropdown Menu */}
            <div 
              className={`absolute top-full mt-2 w-[800px] bg-white rounded-2xl shadow-2xl border border-gray-100 transition-all duration-200 backdrop-blur-sm ${
                toolsDropdownOpen ? 'opacity-100 translate-y-0 visible' : 'opacity-0 -translate-y-4 invisible'
              }`}
              style={{ left: '-350px' }}
            >
              <div className="p-6">
                {/* Header */}
                <div className="mb-6 text-center">
                  <h3 className="text-lg font-bold text-gray-900 mb-1">PDF Tools Collection</h3>
                  <p className="text-sm text-gray-500">35+ professional tools organized by category</p>
                </div>

                <div className="grid grid-cols-1 gap-6">
                  {toolsCategories.map((category) => (
                    <div key={category.name} className="space-y-3">
                      <div className="flex items-center space-x-2">
                        <div className={`h-1 w-6 bg-gradient-to-r ${category.color} rounded-full`}></div>
                        <h4 className="text-sm font-bold text-gray-900 uppercase tracking-wide">
                          {category.name}
                        </h4>
                        {category.name === 'AI Features' && (
                          <span className="bg-gradient-to-r from-violet-500 to-purple-600 text-white text-xs font-bold px-1.5 py-0.5 rounded-full flex items-center">
                            <FireIcon className="h-2 w-2 mr-1" />
                            NEW
                          </span>
                        )}
                      </div>
                      <div className="grid grid-cols-6 gap-1">
                        {category.tools.map((tool) => {
                          const Icon = tool.icon;
                          return (
                            <Link
                              key={tool.name}
                              to={tool.href}
                              onClick={() => setToolsDropdownOpen(false)}
                              className="group flex flex-col items-center space-y-1 p-2 rounded-lg hover:bg-gray-50 transition-colors border border-transparent hover:border-gray-200"
                            >
                              <div className={`h-6 w-6 bg-gradient-to-r ${category.color} rounded-md flex items-center justify-center flex-shrink-0`}>
                                <Icon className="h-3 w-3 text-white" />
                              </div>
                              <div className="text-center min-w-0">
                                <p className="text-xs font-medium text-gray-900 group-hover:text-blue-600 truncate leading-tight">
                                  {tool.name}
                                </p>
                                {(tool.popular || tool.new) && (
                                  <span className={`text-xs font-medium px-1 py-0.5 rounded mt-0.5 inline-block ${
                                    tool.popular ? 'bg-blue-100 text-blue-600' : 'bg-green-100 text-green-600'
                                  }`}>
                                    {tool.popular ? 'Popular' : 'NEW'}
                                  </span>
                                )}
                              </div>
                            </Link>
                          );
                        })}
                      </div>
                    </div>
                  ))}
                </div>

                <div className="mt-6 pt-4 border-t border-gray-100">
                  <div className="text-center">
                    <Link
                      to="/edit-pdf"
                      onClick={() => setToolsDropdownOpen(false)}
                      className="inline-flex items-center space-x-2 rounded-full bg-gradient-to-r from-blue-600 to-purple-600 px-5 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl transition-all duration-200 hover:scale-105"
                    >
                      <PencilIcon className="h-3 w-3" />
                      <span>Try PDF Editor</span>
                    </Link>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="hidden lg:flex lg:flex-1 lg:justify-end">
          <Link
            to="/edit-pdf"
            className="rounded-full bg-gradient-to-r from-blue-600 to-purple-600 px-5 py-2 text-sm font-semibold text-white shadow-lg hover:shadow-xl focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-600 transition-all duration-200 hover:scale-105"
          >
            Start Editing
          </Link>
        </div>
      </nav>

      {/* Mobile menu - Enhanced and Dynamic */}
      <div className={`lg:hidden fixed inset-0 z-50 transition-opacity duration-300 ${
        mobileMenuOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'
      }`}>
        <div 
          className={`fixed inset-0 bg-gray-900/80 transition-opacity duration-300 ${
            mobileMenuOpen ? 'opacity-100' : 'opacity-0'
          }`} 
          onClick={() => setMobileMenuOpen(false)} 
        />
        <div className={`fixed inset-y-0 right-0 z-50 w-full overflow-y-auto bg-white px-4 py-4 sm:max-w-sm transition-transform duration-300 ${
          mobileMenuOpen ? 'translate-x-0' : 'translate-x-full'
        }`}>
          <div className="flex items-center justify-between">
            <Link to="/" className="-m-1.5 p-1.5" onClick={() => setMobileMenuOpen(false)}>
              <span className="sr-only">FlexiPDF</span>
              <div className="flex items-center space-x-2">
                <div className="h-8 w-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg">
                  <DocumentTextIcon className="h-4 w-4 text-white" />
                </div>
                <span className="text-lg font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  FlexiPDF
                </span>
              </div>
            </Link>
            <button
              type="button"
              className="-m-2.5 rounded-md p-2.5 text-gray-700 hover:bg-gray-100 transition-colors"
              onClick={() => setMobileMenuOpen(false)}
            >
              <span className="sr-only">Close menu</span>
              <XMarkIcon className="h-6 w-6" aria-hidden="true" />
            </button>
          </div>
          
          <div className="mt-6 flow-root">
            <div className="-my-6 divide-y divide-gray-500/10">
              <div className="space-y-2 py-6">
                {navigation.map((item) => (
                  <Link
                    key={item.name}
                    to={item.href}
                    className={`-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 transition-colors ${
                      item.highlight
                        ? 'bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg'
                        : location.pathname === item.href
                          ? 'bg-blue-50 text-blue-600'
                          : 'text-gray-900 hover:bg-gray-50'
                    }`}
                    onClick={() => setMobileMenuOpen(false)}
                  >
                    <div className="flex items-center space-x-2">
                      <span>{item.name}</span>
                      {item.highlight && <SparklesIcon className="h-4 w-4" />}
                    </div>
                  </Link>
                ))}
                
                {/* All Tools in Mobile - Compact */}
                <div className="space-y-3 pt-4">
                  <p className="px-3 text-sm font-semibold text-gray-500 uppercase tracking-wide">Quick Tools</p>
                  {toolsCategories.map((category) => (
                    <div key={category.name} className="space-y-2">
                      <div className="flex items-center space-x-2 px-3">
                        <div className={`h-1 w-3 bg-gradient-to-r ${category.color} rounded-full`}></div>
                        <p className="text-xs font-medium text-gray-400 uppercase tracking-wide">
                          {category.name}
                        </p>
                        {category.name === 'AI Features' && (
                          <span className="bg-violet-100 text-violet-600 text-xs font-bold px-1 py-0.5 rounded flex items-center">
                            <FireIcon className="h-2 w-2 mr-1" />
                            NEW
                          </span>
                        )}
                      </div>
                      <div className="grid grid-cols-2 gap-1 px-3">
                        {category.tools.slice(0, 4).map((tool) => {
                          const Icon = tool.icon;
                          return (
                            <Link
                              key={tool.name}
                              to={tool.href}
                              className="flex items-center space-x-2 p-2 text-sm text-gray-700 hover:bg-gray-50 rounded-lg transition-colors"
                              onClick={() => setMobileMenuOpen(false)}
                            >
                              <div className={`h-5 w-5 bg-gradient-to-r ${category.color} rounded flex items-center justify-center`}>
                                <Icon className="h-3 w-3 text-white" />
                              </div>
                              <span className="flex-1 text-xs truncate">{tool.name}</span>
                              {tool.popular && (
                                <span className="bg-blue-100 text-blue-600 text-xs font-medium px-1 py-0.5 rounded">
                                  ★
                                </span>
                              )}
                              {tool.new && (
                                <span className="bg-green-100 text-green-600 text-xs font-medium px-1 py-0.5 rounded">
                                  NEW
                                </span>
                              )}
                            </Link>
                          );
                        })}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="py-6">
                <Link
                  to="/edit-pdf"
                  className="block rounded-full bg-gradient-to-r from-blue-600 to-purple-600 px-4 py-3 text-center text-base font-semibold text-white shadow-lg transition-all duration-200"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  Start Editing PDFs
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
  );
} 